// 执行环境（execution context） 定义了变量或函数有权访问的其他数据，决定了它们各自的行为。
// 全局执行环境被认为是window对象（第七章讨论），因此所有全局变量和函数斗志作为window对象的属性和方法创建的。
// 某个执行环境中的代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁，全局执行环境直到应用程序推出是才被销毁。

// 每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。
// 而在函数执行后，栈将其环境弹出，把控制权返回给之前得到变量。

// 当代码在一个环境中执行时，会创建变量对象的一个作用域链。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。
// 作用域链的前端，始终都是当前执行的代码所在环境的变量对象。


// 延长作用域链
// try-catch语句的catch块
// with语句

// JavaScript没有块级作用域， 如
if (true) {
    var color = 'blue';
}
alert(color);   // 'blue'

for (var i = 0; i < 10; i++) {
    alert(i);
}
alert(i);   // 10

// 声明变量 
/*
    使用var声明的变量会自动被添加到最接近的环境中。在函数内部，最接近的环境就是函数的局部环境；
    在with语句中，最接近的环境就是函数环境。
    ** 如果初始化变量时没有使用var声明，该变量会自动添加到全局变量（在严格模式下会报错）。
*/

